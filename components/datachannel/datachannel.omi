<template name="component-name">
    <div>
        <div id="buttons">
            <button onClick={this.createConnection.bind(this)} id="startButton">Start</button>
            <button onClick={this.sendData.bind(this)} id="sendButton">Send</button>
            <button id="closeButton">Stop</button>
        </div>

        <div id="sendReceive">
            <div id="send">
                <h2>Send</h2>
                <textarea onKeyup={this.getDataChannelSend.bind(this)} ref={this.dataChannelSendRef}
                    id="dataChannelSend"></textarea>
            </div>
            <div id="receive">
                <h2>Receive</h2>
                <textarea onKeyup={this.getDataChannelReceive.bind(this)} ref={this.dataChannelReceiveRef}
                    id="dataChannelReceive"></textarea>
            </div>
        </div>
    </div>
</template>
<script>
    // JS
    export default class {
        dataChannelSendRef = e => { this.dataChannelSend = e.value }
        dataChannelReceiveRef = e => { this.dataChannelReceive = e.value }
        install() {
            this.props = {
                name: 'yao'
            }
            this.data = {
                dataChannelSendValue: null,
                dataChannelReceiveValue: null,
                title: "omi",
                localConnection: null,
                remoteConnection: null,
                sendChannel: null,
                receiveChannel: null
            }
            // this.createConnection();
            console.log({
                ...this
            })
        }
        createConnection() {
            const servers = null;
            window.localConnection = this.data.localConnection = new RTCPeerConnection(servers);
            console.log('Created local peer connection object this.data.localConnection');

            this.data.sendChannel = this.data.localConnection.createDataChannel('sendDataChannel');
            console.log('Created send data channel');

            this.data.localConnection.onicecandidate = e => {
                onIceCandidate(this.data.localConnection, e);
            };
            this.data.sendChannel.onopen = this.onSendChannelStateChange;
            this.data.sendChannel.onclose = this.onSendChannelStateChange;

            window.remoteConnection = this.data.remoteConnection = new RTCPeerConnection(servers);
            console.log('Created remote peer connection object remoteConnection');

            this.data.remoteConnection.onicecandidate = e => {
                this.onIceCandidate(remoteConnection, e);
            };
            remoteConnection.ondatachannel = this.receiveChannelCallback;

            this.data.localConnection.createOffer().then(
                // gotDescription1,
                // onCreateSessionDescriptionError
            );
        }
        onSendChannelStateChange() {
            const readyState = this.data.sendChannel.readyState;
            console.log('Send channel state is: ' + readyState);
        }
        receiveChannelCallback(event) {
            console.log('Receive Channel Callback');
            // receiveChannel = event.channel;
            // receiveChannel.onmessage = onReceiveMessageCallback;
            // receiveChannel.onopen = onReceiveChannelStateChange;
            // receiveChannel.onclose = onReceiveChannelStateChange;
        }
        onIceCandidate(pc, event) {
            // getOtherPc(pc)
            //     .addIceCandidate(event.candidate)
            //     .then(
            //         () => onAddIceCandidateSuccess(pc),
            //         err => onAddIceCandidateError(pc, err)
            //     );
            console.log(`${getName(pc)} ICE candidate: ${event.candidate ? event.candidate.candidate : '(null)'}`);
        }
        sendData() {
            console.log(this.data.dataChannelSendValue);
            console.log(this.data.dataChannelReceiveValue);
            const data = this.data.dataChannelSendValue;
            this.data.sendChannel.send(data);
            // console.log('Sent Data: ' + data);
        }
        getDataChannelSend(e) {
            this.data.dataChannelSendValue = e.target.value;
            console.log(e.target.value)
        }
        getDataChannelReceive(e) {
            this.data.dataChannelReceiveValue = e.target.value;
            console.log(e.target.value)
        }
    }
</script>
<style lang="scss">
    /* CSS */
    textarea {
        width: 200px;
        height: 200px;
    }
</style>